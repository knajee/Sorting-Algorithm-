import time
import random

def measure_time(func, arr):
    """Measure execution time of a function"""
    start_time = time.time()
    func(arr.copy())  # Pass a copy to preserve original array
    end_time = time.time()
    return (end_time - start_time) * 1000  # Convert to milliseconds

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    
    merge_sort(left)
    merge_sort(right)
    
    i = j = k = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1
        else:
            arr[k] = right[j]
            j += 1
        k += 1
    
    while i < len(left):
        arr[k] = left[i]
        i += 1
        k += 1
    
    while j < len(right):
        arr[k] = right[j]
        j += 1
        k += 1
    
    return arr

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort(left) + middle + quick_sort(right)

# Generate test arrays
size = 1000

# Best case scenario (already sorted)
best_case = list(range(size))

# Average case scenario (random numbers)
average_case = random.sample(range(size), size)

# Worst case scenario (reverse sorted)
worst_case = list(range(size, 0, -1))

# Test arrays
test_arrays = {
    "Best Case": best_case,
    "Average Case": average_case,
    "Worst Case": worst_case
}

# Sorting algorithms
algorithms = {
    "Bubble Sort": bubble_sort,
    "Selection Sort": selection_sort,
    "Merge Sort": merge_sort,
    "Quick Sort": quick_sort
}

# Run performance tests
results = {}

for algo_name, algo_func in algorithms.items():
    results[algo_name] = {}
    for case_name, arr in test_arrays.items():
        execution_time = measure_time(algo_func, arr)
        results[algo_name][case_name] = execution_time

# Print results
print("\nPerformance Results (in milliseconds):")
print("-" * 60)
print(f"{'Algorithm':<15} {'Best Case':>12} {'Average Case':>15} {'Worst Case':>12}")
print("-" * 60)

for algo_name in algorithms:
    print(f"{algo_name:<15} {results[algo_name]['Best Case']:>12.4f} "
          f"{results[algo_name]['Average Case']:>15.4f} "
          f"{results[algo_name]['Worst Case']:>12.4f}")

print("-" * 60)
